import re
from typing import List, Dict, Tuple
from .vulnerability import Vulnerability


class ReVulnerabilityDetector:
    VULNERABILITY_PATTERNS = {
        "XSS": [
            # Java Patterns
            r"(response\\.getWriter\\(\\)\\.print|out\\.println)\\(\\s*(?!\"[^\"]*\"\\s*\\)$).*",
            # JSP Patterns
            r"\$\{.*?\}",  # Direct EL expressions
            r'<c:out value=".*?"',  # JSTL out tag
        ],
        "SQL_INJECTION": [
            r"(Statement|PreparedStatement)\.execute(Query|Update)?\s*\(.*(?:request\.getParameter|request\.getQueryString).*\)",
            r'(\.createQuery\(|\.createNativeQuery\()\s*["\'].*\$.*["\']',  # HQL/JPQL Injection
        ],
        "COMMAND_INJECTION": [
            r"(Runtime\.getRuntime\(\)\.exec|ProcessBuilder)\(.*\)",
            r"java\.lang\.Runtime\.getRuntime\(\)\.exec",
        ],
        "PATH_TRAVERSAL": [
            r"(new File|FileInputStream)\(.*user.*input.*\)",
            r"\.getResourceAsStream\(.*\+.*\)",
            r"(?:https?://[^/\s]+|(?:GET|POST|PUT|DELETE|PATCH|OPTIONS)\s+)[^\s]*?(?:\.\./|\.\\)[^\s]*",
        ],
        "DESERIALIZATION": [
            r"ObjectInputStream\.readObject\(\)",
            r"new ObjectInputStream\(",
        ],
        "SENSITIVE_DATA_EXPOSURE": [
            r"System\.out\.println\(.*password.*\)",
            r"logger\.info\(.*credentials.*\)",
            r"print.*sensitive",
        ],
    }

    @classmethod
    def detect_vulnerabilities(
        cls, content: str, file_path: str
    ) -> List[Vulnerability]:
        vulnerabilities = []

        for vuln_type, patterns in cls.VULNERABILITY_PATTERNS.items():
            for pattern in patterns:
                matches = re.finditer(pattern, content, re.MULTILINE | re.IGNORECASE)
                for match in matches:
                    vulnerabilities.append(
                        Vulnerability(
                            type=vuln_type,
                            line=content[: match.start()].count("\n") + 1,
                            match=match.group(0),
                            file_path=file_path,
                            description=f"Potential {vuln_type} vulnerability",
                            severity=cls._determine_severity(vuln_type),
                            engine="re",
                        )
                    )

        return vulnerabilities

    @staticmethod
    def _determine_severity(vuln_type: str) -> str:
        severity_map = {
            "XSS": "HIGH",
            "SQL_INJECTION": "CRITICAL",
            "COMMAND_INJECTION": "CRITICAL",
            "PATH_TRAVERSAL": "HIGH",
            "DESERIALIZATION": "CRITICAL",
            "SENSITIVE_DATA_EXPOSURE": "MEDIUM",
        }
        return severity_map.get(vuln_type, "LOW")
